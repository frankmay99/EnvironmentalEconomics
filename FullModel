PreTradeQ[m_, n_, gamma_] := m/(n gamma)

(*Our function to generate a list of firms takes the number of firms, \
the details of the gamma distribution and the initial profit \
coefficient as parameters
*)
FirmList[n0_, GammaMean0_, GammaSD0_ , ProfitCoefficient0_] := 
 Module[{n = n0, GammaMean = GammaMean0, GammaSD = GammaSD0, 
   ProfitCoefficient = ProfitCoefficient0},
  (*Generate an empty list, 
  which we later fill in with the relevant information*)
  
  list = ConstantArray[0, {n, 4}];
  (*Create a For loop to iterate over the empty array we want to fill \
in*)
  For[i = 1, i <= n, i++,
   list[[i, 1]] = i;
   list[[i, 2]] = 
    RandomVariate[
     TruncatedDistribution[{0, 1000}, 
      NormalDistribution[GammaMean, GammaSD]]];
   (*We list each firms' profit functions within the firm list, 
   as this allows easy updating with the relevant accumulated \
investment amount*)
   
   list[[i, 3]] = Profit[c, list[[i, 2]], ProfitCoefficient]; 
   (*Initialise accumulated investment to 0*)
   list[[i, 4]] = 0
   ];
  list
  ]
  
  (*Exactly the same as before, except with an additional column which \
includes each firms' beta value*) 
FirmListWithBetas[n0_, GammaMean0_, GammaSD0_ , ProfitCoefficient0_] :=
  Module[{n = n0, GammaMean = GammaMean0, GammaSD = GammaSD0, 
   ProfitCoefficient = ProfitCoefficient0},
  list = ConstantArray[0, {n, 5}];
  For[i = 1, i <= n, i++,
   list[[i, 1]] = i;
   list[[i, 2]] = 
    RandomVariate[
     TruncatedDistribution[{0, 1000}, 
      NormalDistribution[GammaMean, GammaSD]]];
   list[[i, 3]] = Profit[c, list[[i, 2]], ProfitCoefficient]; 
   list[[i, 4]] = 0;
   list[[i, 5]] = RandomVariate[UniformDistribution[]];
   ];
  list
  ]
  
  Supply[firmlist0_, m0_] := Module[{firmlist = firmlist0, m = m0},
  (*For each firm in the sample, 
  calculating the profit derivatives for us to subsequently solve for \
optimal quantities*)
  DerivativeList = Table[\!\(
\*SubscriptBox[\(\[PartialD]\), \(c\)]\ \(firmlist[\([\)\(i, 
      3\)\(]\)]\)\), {i, 1, Length[firmlist]}];
  (*Individual supplies all calculated in one line to minimise the \
number of tables that need to be created- when combined with inner-
  functions,
  this causes the overall 'Demand' function to run very slowly. 
  Use of Max functions crucial in ensuring we get non-negative values*)

    IndividualSupply = 
   Function[p, 
    Table[firmlist[[i, 2]] Max[
       m/(Length[firmlist]*firmlist[[i, 2]]) - 
        Solve[DerivativeList[[i]] == p firmlist[[i, 2]], c][[1, 1, 
         2]], 0], {i, 1, Length[firmlist]}]];
  (*Total supply is simply given as a sum of all the individual \
supply functions*)
  
  TotalSupply = Function[p, Total[IndividualSupply[p]]];
  {TotalSupply, IndividualSupply}
  ]
  
  Demand[firmlist0_, m0_, initialPermits0_] := 
 Module[{firmlist = firmlist0, m = m0, init = initialPermits0},
  (*For each firm in the sample, 
  calculating the profit derivatives for us to subsequently solve*)
  
  DerivativeList = Table[\!\(
\*SubscriptBox[\(\[PartialD]\), \(c\)]\ \(firmlist[\([\)\(i, 
      3\)\(]\)]\)\), {i, 1, Length[firmlist]}];
  (*Individual demands all calculated in one line to minimise the \
number of tables that need to be created- when combined with inner-
  functions,
  this causes the overall 'Demand' function to run very slowly*)
  
  IndividualDemand = 
   Function[p, 
    Table[firmlist[[i, 2]] Max[
       Solve[DerivativeList[[i]] == p firmlist[[i, 2]], c][[1, 1, 
         2]] - m/(Length[firmlist]*firmlist[[i, 2]]), 0], {i, 1, 
      Length[firmlist]}]];
  (*Total demand is simply given as a sum of all the individual \
demand functions, 
  and capped at the maximum number of permits in systemn to prevent \
plotting infinite values (as demand when p \[Rule] 
  0 approaches infinite*)
  
  TotalDemand = Function[p, Min[Total[IndividualDemand[p]], m]];
  InitialTotalDemand = 
   Function[p, Min[Total[IndividualDemand[p]], init]];
  {TotalDemand, IndividualDemand, InitialTotalDemand}
  ]
  
  (*Function necessary to solve for the equilibrium permit price. For a \
given price, supply exceeds demand as soon as the price exceeds the \
equilibrium price. As such, we iterate through prices and check to \
see whether this is the case.*)

GetSolution[supply0_, demand0_, MaxPrice0_, StepSize0_] := 
 Module[{supply = supply0, demand = demand0, MP = MaxPrice0, 
   SS = StepSize0},
  ComparisonTable = ConstantArray[0, {Round[MP/SS], 2}];
  (*Iterate through prices, 
  with each iteration being equal to a step size*)
  
  For[i = 1, i <= (MP/SS), i++,
   ComparisonTable[[i, 1]] = SS i;
   ComparisonTable[[i, 2]] = supply[SS i] - demand[SS i];
   (*If the difference between supply and demand is positive, 
   take the previous price iteration, 
   and linearly interpolate with the current price iteration to find \
an estimation of the equilibrium price. Once this is the case, 
   break the For loop.*)
   
   If[ComparisonTable[[i, 2]] > 0, 
    EquilibriumPrice = ( SS Abs[ComparisonTable[[i - 1, 2]] ])/(
      Abs[ComparisonTable[[i, 2]]] + 
       Abs[ComparisonTable[[i - 1, 2]]]) + 
      ComparisonTable[[i - 1, 1]]; Break[], Null]
   ];
  EquilibriumPrice
  ]
  
  (*Generates a table to look at the fate of individual firms in a \
given permit equilibrium
*)
ProfitSolver[Firms0_, PermitPrice_, m0_] := 
 Module[{firmlist = Firms0, price = PermitPrice, m = m0},
  SolutionList = ConstantArray[0, {Length[firmlist] + 1, 9}];
  SolutionList[[1, 1]] = "\!\(\*
StyleBox[\"Firm\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"#\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 2]] = "\!\(\*
StyleBox[\"Pollution\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"eff\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 3]] = "Q(\!\(\*
StyleBox[\"Pre\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"trade\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\")\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 4]] = "Q(\!\(\*
StyleBox[\"Post\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"trade\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\")\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 5]] = "\!\(\*
StyleBox[\"Total\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"permits\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"required\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 6]] = "\!\(\*
StyleBox[\"Permits\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"bought\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"/\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"sold\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 7]] = "\!\(\*
StyleBox[\"Pre\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"trade\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"profit\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 8]] = "\!\(\*
StyleBox[\"Post\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"trade\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"Profit\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 9]] = "\!\(\*
StyleBox[\"Post\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"/\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"pre\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"profit\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"ratio\",\nFontWeight->\"Bold\"]\)";
  For[i = 2, i <= Length[firmlist] + 1, i++,
   SolutionList[[i, 1]] = i - 1;
   SolutionList[[i, 2]] = firmlist[[i - 1, 2]];
   SolutionList[[i, 3]] = 
    PreTradeQ[m, Length[firmlist], firmlist[[i - 1, 2]]];
   SolutionList[[i, 4]] = Solve[\!\(
\*SubscriptBox[\(\[PartialD]\), \(c\)]\((firmlist[\([\)\(i - 1, 
           3\)\(]\)] + \((\((price\ *\ 
              firmlist[\([\)\(i - 1, 
               2\)\(]\)])\) \((\ \((PreTradeQ[\ m, \ 
                Length[firmlist], \ 
                firmlist[\([\)\(i - 1, 2\)\(]\)]] - c)\))\))\))\)\) ==
        0, c][[1, 1, 2]];
   SolutionList[[i, 5]] = SolutionList[[i, 4]] firmlist[[i - 1, 2]];
   SolutionList[[i, 6]] = 
    SolutionList[[i, 5]] - (m/Length[firmlist]);
   SolutionList[[i, 7]] = 
    firmlist[[i - 1, 3]] /. c -> SolutionList[[i, 3]];
   SolutionList[[i, 
     8]] = (firmlist[[i - 1, 3]] /. 
       c -> SolutionList[[i, 4]]) + (price * 
       firmlist[[i - 1, 
        2]] (PreTradeQ[ m, Length[firmlist], firmlist[[i - 1, 2]]] - 
         SolutionList[[i, 4]]));
   SolutionList[[i, 9]] = SolutionList[[i, 8]]/SolutionList[[i, 7]];
   ];
  ;
  TP = Total[
    Table[SolutionList[[i, 5]], {i, 2, Length[firmlist] + 1}]];
  {SolutionList, TP}
  ]
  
  (*Exactly the same as before, except now with a column for beta \
values included*)

ProfitSolverWithBetas[Firms0_, PermitPrice_, m0_] := 
 Module[{firmlist = Firms0, price = PermitPrice, m = m0},
  SolutionList = ConstantArray[0, {Length[firmlist] + 1, 10}];
  SolutionList[[1, 1]] = "\!\(\*
StyleBox[\"Firm\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"#\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 2]] = "\!\(\*
StyleBox[\"Pollution\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"eff\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 3]] = "Q(\!\(\*
StyleBox[\"Pre\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"trade\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\")\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 4]] = "Q(\!\(\*
StyleBox[\"Post\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"trade\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\")\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 5]] = "\!\(\*
StyleBox[\"Total\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"permits\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"required\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 6]] = "\!\(\*
StyleBox[\"Permits\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"bought\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"/\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"sold\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 7]] = "\!\(\*
StyleBox[\"Pre\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"trade\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"profit\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 8]] = "\!\(\*
StyleBox[\"Post\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"-\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"trade\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"Profit\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 9]] = "\!\(\*
StyleBox[\"Post\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"/\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"pre\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"profit\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"ratio\",\nFontWeight->\"Bold\"]\)";
  SolutionList[[1, 10]] = "\!\(\*
StyleBox[\"Beta\",\nFontWeight->\"Bold\"]\)";
  For[i = 2, i <= Length[firmlist] + 1, i++,
   SolutionList[[i, 1]] = i - 1;
   SolutionList[[i, 2]] = firmlist[[i - 1, 2]];
   SolutionList[[i, 3]] = 
    PreTradeQ[m, Length[firmlist], firmlist[[i - 1, 2]]];
   SolutionList[[i, 4]] = Solve[\!\(
\*SubscriptBox[\(\[PartialD]\), \(c\)]\((firmlist[\([\)\(i - 1, 
           3\)\(]\)] + \((\((price\ *\ 
              firmlist[\([\)\(i - 1, 
               2\)\(]\)])\) \((\ \((PreTradeQ[\ m, \ 
                Length[firmlist], \ 
                firmlist[\([\)\(i - 1, 2\)\(]\)]] - c)\))\))\))\)\) ==
        0, c][[1, 1, 2]];
   SolutionList[[i, 5]] = SolutionList[[i, 4]] firmlist[[i - 1, 2]];
   SolutionList[[i, 6]] = 
    SolutionList[[i, 5]] - (m/Length[firmlist]);
   SolutionList[[i, 7]] = 
    firmlist[[i - 1, 3]] /. c -> SolutionList[[i, 3]];
   SolutionList[[i, 
     8]] = (firmlist[[i - 1, 3]] /. 
       c -> SolutionList[[i, 4]]) + (price * 
       firmlist[[i - 1, 
        2]] (PreTradeQ[ m, Length[firmlist], firmlist[[i - 1, 2]]] - 
         SolutionList[[i, 4]]));
   SolutionList[[i, 9]] = SolutionList[[i, 8]]/SolutionList[[i, 7]];
   SolutionList[[i, 10]] = firmlist[[i - 1, 5]];
   ];
  ;
  TP = Total[
    Table[SolutionList[[i, 5]], {i, 2, Length[firmlist] + 1}]];
  {SolutionList, TP}
  ]
  
  (*Command to run each of the previously defined functions in order, \
which allow us to generate equilibrium simulations with a single \
click*)
GetPermitEquilibrium[m0_, initialPermits0_, MaxPrice0_, 
  StepSize0_, firms0_] := 
 Module[{m = m0, InitialPermits = initialPermits0, 
   MaxPrice = MaxPrice0, StepSize = StepSize0, inputfirms = firms0},
  (*First generate supply and demand functions*)
  
  SupplyOutput = Supply[inputfirms, m];
  TotalSupplyFunction = SupplyOutput[[1]];
  IndividualSupplyFunctions = SupplyOutput[[2]];
  DemandOutput = Demand[inputfirms, m, InitialPermits];
  TotalDemandFunction = DemandOutput[[1]];
  IndividualDemandFunctions = DemandOutput[[2]];
  InitialDemandFunction = DemandOutput[[3]];
  (*Now caluclate the equilibrium price using the iterative/
  interpolating function*)
  
  price = GetSolution[TotalSupplyFunction, TotalDemandFunction, 1000, 
    0.25];
  (*Input this price into the equilibrium solver to generate the \
equilibrium state*)
  
  ProfitOutput = ProfitSolver[inputfirms, price, m];
  FirmTable = ProfitOutput[[1]];
  (*Outputs the number of permits required by the firms' optimal \
production quantities, and if it equals the input permit supply, 
  we know that the optimal values of quantities etc. are valid. 
  If this doesn't debugging commences!*)
  
  PermitTotal = ProfitOutput[[2]];
  (*Create a list of all the relevant outputs*)
  {FirmTable, 
   PermitTotal, price, TotalSupplyFunction, TotalDemandFunction, 
   InitialDemandFunction}
  ]
  
  (*Same as above except with heterogenous beta functionality*)

GetPermitEquilibriumWithBetas[m0_, initialPermits0_, MaxPrice0_, 
  StepSize0_, firms0_] := 
 Module[{m = m0, InitialPermits = initialPermits0, 
   MaxPrice = MaxPrice0, StepSize = StepSize0, inputfirms = firms0},
  SupplyOutput = Supply[inputfirms, m];
  TotalSupplyFunction = SupplyOutput[[1]];
  IndividualSupplyFunctions = SupplyOutput[[2]];
  DemandOutput = Demand[inputfirms, m, InitialPermits];
  TotalDemandFunction = DemandOutput[[1]];
  IndividualDemandFunctions = DemandOutput[[2]];
  InitialDemandFunction = DemandOutput[[3]];
  price = 
   GetSolution[TotalSupplyFunction, TotalDemandFunction, 1000, 0.25];
  ProfitOutput = ProfitSolverWithBetas[inputfirms, price, m];
  FirmTable = ProfitOutput[[1]];
  PermitTotal = ProfitOutput[[2]];
  {FirmTable, PermitTotal, price, TotalSupplyFunction, 
   TotalDemandFunction, InitialDemandFunction}
  ]
  
  (*Calculating expected permit price equilibriums in the future*)
GetPermitPriceEvolution[time_, mZero_, mFinal0_, numberYears0_, 
  Firms0_] := 
 Module[{T = time, m0 = mZero, mFinal = mFinal0, 
   numberYears = numberYears0, firmlist = Firms0},
  MarketForecast = ConstantArray[0, {(numberYears - T) + 1, 3}];
  (*Initial permits need to be consistent with what time period it \
is. For example in t=0, m=1000, but in t=1, intitail m = 925*)
  
  InitialPermits = m0 - T ((m0 - mFinal)/numberYears);
  For[t = 1, t <= (numberYears - T) + 1, t++,
   MarketForecast[[t, 1]] = t - 1;
   MarketForecast[[t, 2]] = 
    InitialPermits - ((m0 - mFinal)/(numberYears)) (t - 1);
   (*Permit equilibriums calculated for each of the remaining time \
periods, with the appropriate supply of permits, 
   at the current level of gammas. 
   Equivalent is changing the above example equilibrium's parameter \
value from 500 to whatever, 
   and caluclating the resulting price for each of the remaining time \
periods*)
   
   MarketForecast[[t, 3]] = 
    GetPermitEquilibriumWithBetas[MarketForecast[[t, 2]], m0, 100, 
      0.2, firmlist][[3]]; 
   ];
  MarketForecast
  ]
  
  (*This is definitely the most complicated function in the overall \
model. Its objective is to output a list net present values for eacxh \
scenario of decarbonising in each potential future time period. It \
then outputs the point in time where the NPV is the highest, as well \
as the list of NPVs coming from decarbonising in each remaining time \
period. It needs to be able to handle variable time remaining until \
cutoffs, as we iterate through this function later at differen time \
periods*)
GetSingleFirmNPVList[PermitPriceForecasts_, firm0_, 
  GammaStep0_, ProfitStep0_, InitialTimePeriod0_, RhoDiscountRate0_, 
  BetaRate0_, PostCutoffGrowthRate_, CutoffGamma_, NumberYears0_] := 
 Module[{PriceForecastsFull = PermitPriceForecasts, firmlist = firm0, 
   GammaStep = GammaStep0, ProfitStep = ProfitStep0, 
   T = InitialTimePeriod0, RhoDiscountRate = RhoDiscountRate0, 
   BetaRate = BetaRate0, g = PostCutoffGrowthRate, 
   Cutoff = CutoffGamma, NumberYears = NumberYears0},
  (*Intialise key parameter values and information arrays*)
  
  DiscountCoefficient = 1/(1 + RhoDiscountRate);
  PriceForecasts = Transpose[PriceForecastsFull][[3]];
  PermitForecasts = Transpose[PriceForecastsFull][[2]];
  NPVList = ConstantArray[0, {Length[PriceForecasts], 2}];
  (*Begin iterating through each hypothetical start date for \
decarbonisation*) 
  For[TimeWhenGammaInvest = 0, 
   TimeWhenGammaInvest <= Length[PriceForecasts] - 1 , 
   TimeWhenGammaInvest++,
   GammaForecast = firmlist[[2]];
   YearlyProfitForecast = 
    ConstantArray[0, {Length[PriceForecasts], 2}];
   AccumulatedInvestmentForecast = 0;
   (*Begin for loop that goes over each time evolution for one \
hypothetical decarbonisation date*)
   
   For[i = 0, i <= Length[PriceForecasts] - 1, i++,
    PermitsPerFirm = PermitForecasts[[i + 1]]/Length[firms];
    GammaNew = GammaForecast;
    (*Begins logic chain: 
    if the time period is before the decarbonisation beginning, 
    increase accumulated investment. 
    If its at or after the decarbonisation beginning, 
    decrease gamma and set accumulated investment to 0. If gamma is \
at the cutoff, increase accumulated investment.*)
    
    If[i < TimeWhenGammaInvest,
     AccumulatedInvestmentForecast = 
       AccumulatedInvestmentForecast + 1; 
     ,
     If[GammaForecast > Cutoff,
       AccumulatedInvestmentForecast = 0;
       GammaNew = GammaNew - GammaStep;
       If[GammaNew < Cutoff, GammaNew = Cutoff, Null];
       ,
       AccumulatedInvestmentForecast = 
        AccumulatedInvestmentForecast + 1
       ];
     ];
    (*Update the hypothetical gamma value for this time period*)
    
    GammaForecast = GammaNew;
    (*Calculate the expected profit from having this gamma at this \
time period with this level of accumulated investment*) 
    OptimalProduction = Solve[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(c\)]\(Profit[c, \ GammaForecast, 
           100 + \((AccumulatedInvestmentForecast\ *\ 
              ProfitStep)\)]\)\)) == 
        PriceForecasts[[i + 1]] GammaForecast, c][[1, 1, 2]];
    YearlyProfitForecast[[i + 1, 1]] = 
     Profit[OptimalProduction, 
       GammaForecast, (100 + (AccumulatedInvestmentForecast * 
           ProfitStep))] + 
      PriceForecasts[[i + 1]] GammaForecast ((PermitsPerFirm/
          GammaForecast) - OptimalProduction);
    (*Discount the calculated profit from this time period*) 
    YearlyProfitForecast[[i + 1, 2]] = 
     YearlyProfitForecast[[i + 1, 1]] * 
      If[i == 0, 1, BetaRate DiscountCoefficient^i];
    (*If the gamma is at or below the cutoff, 
    calculate a terminal profit*)
    
    YearlyProfitForecast[[Length[PriceForecasts], 1]] = 
     If[GammaForecast <= Cutoff, ((
       YearlyProfitForecast[[Length[PriceForecasts], 1]] (1 + g))/(
       RhoDiscountRate - g)), 0];
    (*Discount the terminal profit*)
    
    YearlyProfitForecast[[Length[PriceForecasts], 2]] = 
     YearlyProfitForecast[[Length[PriceForecasts], 1]] * 
      If[i == 0, DiscountCoefficient^(Length[PriceForecasts] - 1), 
       BetaRate DiscountCoefficient^(Length[PriceForecasts] - 1)];
    ];
   (*Update the NPV list we plan to output*)
   
   NPVList[[TimeWhenGammaInvest + 1, 1]] = TimeWhenGammaInvest;
   NPVList[[TimeWhenGammaInvest + 1, 2]] = 
    Total[Transpose[YearlyProfitForecast][[2]]];
   ];
  (*Extract the date in the present/
  future with the highest net present value*)
  
  PlannedBeginDecarbonisation = 
   NPVList[[Ordering[Transpose[NPVList][[2]], -1][[1]], 1]];
  {PlannedBeginDecarbonisation, NPVList}
  ]
  
  (*Exactly the same but with heterogenous beta functionality *)

GetSingleFirmNPVListWithBeta[PermitPriceForecasts_, firm0_, 
  GammaStep0_, ProfitStep0_, InitialTimePeriod0_, RhoDiscountRate0_, 
  BetaRate0_, PostCutoffGrowthRate_, CutoffGamma_, NumberYears0_] := 
 Module[{PriceForecastsFull = PermitPriceForecasts, firmlist = firm0, 
   GammaStep = GammaStep0, ProfitStep = ProfitStep0, 
   T = InitialTimePeriod0, RhoDiscountRate = RhoDiscountRate0, 
   BetaRate = BetaRate0, g = PostCutoffGrowthRate, 
   Cutoff = CutoffGamma, NumberYears = NumberYears0},
  DiscountCoefficient = 1/(1 + RhoDiscountRate);
  PriceForecasts = Transpose[PriceForecastsFull][[3]];
  PermitForecasts = Transpose[PriceForecastsFull][[2]];
  NPVList = ConstantArray[0, {Length[PriceForecasts], 2}];
  For[TimeWhenGammaInvest = 0, 
   TimeWhenGammaInvest <= Length[PriceForecasts] - 1 , 
   TimeWhenGammaInvest++,
   GammaForecast = firmlist[[2]];
   YearlyProfitForecast = 
    ConstantArray[0, {Length[PriceForecasts], 2}];
   AccumulatedInvestmentForecast = 0;
   For[i = 0, i <= Length[PriceForecasts] - 1, i++,
    PermitsPerFirm = PermitForecasts[[i + 1]]/Length[firms];
    GammaNew = GammaForecast;
    If[i < TimeWhenGammaInvest,
     AccumulatedInvestmentForecast = 
       AccumulatedInvestmentForecast + 1; 
     ,
     If[GammaForecast > Cutoff,
       AccumulatedInvestmentForecast = 0;
       GammaNew = GammaNew - GammaStep;
       If[GammaNew < Cutoff, GammaNew = Cutoff, Null];
       ,
       AccumulatedInvestmentForecast = 
        AccumulatedInvestmentForecast + 1
       ];
     ];
    GammaForecast = GammaNew;
    OptimalProduction = Solve[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(c\)]\(Profit[c, \ GammaForecast, 
           100 + \((AccumulatedInvestmentForecast\ *\ 
              ProfitStep)\)]\)\)) == 
        PriceForecasts[[i + 1]] GammaForecast, c][[1, 1, 2]];
    YearlyProfitForecast[[i + 1, 1]] = 
     Profit[OptimalProduction, 
       GammaForecast, (100 + (AccumulatedInvestmentForecast * 
           ProfitStep))] + 
      PriceForecasts[[
        i + 1]] GammaForecast ((PermitsPerFirm/GammaForecast) - 
         OptimalProduction);
    YearlyProfitForecast[[i + 1, 2]] = 
     YearlyProfitForecast[[i + 1, 1]] * 
      If[i == 0, 1, firmlist[[5]] DiscountCoefficient^i];
    YearlyProfitForecast[[Length[PriceForecasts], 1]] = 
     If[GammaForecast <= Cutoff, ((
       YearlyProfitForecast[[Length[PriceForecasts], 1]] (1 + g))/(
       RhoDiscountRate - g)), 0];
    YearlyProfitForecast[[Length[PriceForecasts], 2]] = 
     YearlyProfitForecast[[Length[PriceForecasts], 1]] * 
      If[i == 0, DiscountCoefficient^(Length[PriceForecasts] - 1), 
       firmlist[[5]] DiscountCoefficient^(Length[PriceForecasts] - 1)];
    ];
   NPVList[[TimeWhenGammaInvest + 1, 1]] = TimeWhenGammaInvest;
   NPVList[[TimeWhenGammaInvest + 1, 2]] = 
    Total[Transpose[YearlyProfitForecast][[2]]];
   ];
  PlannedBeginDecarbonisation = 
   NPVList[[Ordering[Transpose[NPVList][[2]], -1][[1]], 1]];
  {PlannedBeginDecarbonisation, NPVList}
  ]
  
  (*Creates a function that outputs the list of profits in each future \
time period for a given decarbonisation date. This allows us to check \
that the output of our NPV list is correct, and that firms are making \
the right decisions as given by the rules we want*)

GetYearlyForecastList[ChosenTime_, PermitPriceForecasts_, firm0_, 
  GammaStep0_, ProfitStep0_, InitialTimePeriod0_, RhoDiscountRate0_, 
  BetaRate0_, PostCutoffGrowthRate_, CutoffGamma_] := 
 Module[{Time = ChosenTime, 
   PriceForecastsFull = PermitPriceForecasts, firmlist = firm0, 
   GammaStep = GammaStep0, ProfitStep = ProfitStep0, 
   InitialT = InitialTimePeriod0, RhoDiscountRate = RhoDiscountRate0, 
   BetaRate = BetaRate0, g = PostCutoffGrowthRate, 
   Cutoff = CutoffGamma},
  DiscountCoefficient = 1/(1 + RhoDiscountRate);
  PriceForecasts = Transpose[PriceForecastsFull][[3]];
  PermitForecast = Transpose[PriceForecastsFull][[2]];
  OutputList = ConstantArray[0, 11];
  For[TimeWhenGammaInvest = 0, 
   TimeWhenGammaInvest <= Length[PriceForecasts] - 1, 
   TimeWhenGammaInvest++,
   GammaForecast = firmlist[[2]];
   YearlyProfitForecast = 
    ConstantArray[0, {Length[PriceForecasts], 2}];
   ElementList = ConstantArray[0, {Length[PriceForecasts] + 1, 2}];
   AccumulatedInvestmentForecast = 0;
   For[i = 0, i <= Length[PriceForecasts] - 1, i++,
    PermitsPerFirm = PermitForecast[[i + 1]]/Length[firms];
    GammaNew = GammaForecast;
    If[i < TimeWhenGammaInvest,
     AccumulatedInvestmentForecast = 
       AccumulatedInvestmentForecast + 1; 
     ,
     If[GammaForecast > Cutoff,
       AccumulatedInvestmentForecast = 0;
       GammaNew = GammaNew - GammaStep;
       If[GammaNew < Cutoff, GammaNew = Cutoff, Null];
       ,
       AccumulatedInvestmentForecast = 
        AccumulatedInvestmentForecast + 1
       ];
     ];
    GammaForecast = GammaNew;
    OptimalProduction = Solve[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(c\)]\(Profit[c, \ GammaForecast, 
           100 + \((AccumulatedInvestmentForecast\ *\ 
              ProfitStep)\)]\)\)) == 
        PriceForecasts[[i + 1]] GammaForecast, c][[1, 1, 2]];
    YearlyProfitForecast[[i + 1, 1]] = 
     Profit[OptimalProduction, 
       GammaForecast, (100 + (AccumulatedInvestmentForecast * 
           ProfitStep))] + 
      PriceForecasts[[
        i + 1]] GammaForecast ((PermitsPerFirm/GammaForecast) - 
         OptimalProduction);
    YearlyProfitForecast[[i + 1, 2]] = 
     YearlyProfitForecast[[i + 1, 1]] * 
      If[i == 0, 1, BetaRate DiscountCoefficient^i];
    YearlyProfitForecast[[Length[PriceForecasts], 1]] = 
     If[GammaForecast <= Cutoff, ((
       YearlyProfitForecast[[Length[PriceForecasts], 1]] (1 + g))/(
       RhoDiscountRate - g)), 0];
    YearlyProfitForecast[[Length[PriceForecasts], 2]] = 
     YearlyProfitForecast[[Length[PriceForecasts], 1]] * 
      If[i == 0, DiscountCoefficient^(Length[PriceForecasts] - 1), 
       BetaRate DiscountCoefficient^(Length[PriceForecasts] - 1)];
    ElementList[[i + 1, 1]] = YearlyProfitForecast[[i + 1, 1]];
    ElementList[[i + 1, 2]] = YearlyProfitForecast[[i + 1, 2]];
    ];
   ElementList[[Length[PriceForecasts] + 1, 1]] = 
    Total[Transpose[YearlyProfitForecast][[1]]];
   ElementList[[Length[PriceForecasts] + 1, 2]] = 
    Total[Transpose[YearlyProfitForecast][[2]]];
   OutputList[[TimeWhenGammaInvest]] = ElementList
   ];
  OutputList[[Time]]
  ]
  
  (*Simply runs a for loop, inputting each firm in the sample into the \
NPVlist generator to get NPV lists for every firm in the sample*)
GetAllFirmNPV[firmlist0_, PriceForecasts0_ , ProfitStepSize0_, 
   GammaStepSize0_, PresentBias0_, RhoDiscountRate0_, 
   PostCutoffGrowth_, initialTime_, CutoffGamma_] := 
  Module[{firmlist = firmlist0, PriceForecasts = PriceForecasts0, 
    PiStepSize = ProfitStepSize0, GammaStepSize = GammaStepSize0, 
    Beta = PresentBias0, Rho = RhoDiscountRate0, 
    g = PostCutoffGrowth, time = initialTime, Cutoff = CutoffGamma},
   DecarbonisationScheduleArray =
    Table[{i, firmlist[[i, 2]], 
      GetSingleFirmNPVList[PriceForecasts, firmlist[[i]], 
        GammaStepSize, PiStepSize, t, Rho, Beta , g, Cutoff, 10][[
       1]]}, {i, 1, Length[firms]}];
   DecarbonisationScheduleArray
   ];
   
   (*Same as above except with heterogenous beta functionality*)

GetAllFirmNPVWithBetas[firmlist0_, PriceForecasts0_ , 
   ProfitStepSize0_, GammaStepSize0_, PresentBias0_, 
   RhoDiscountRate0_, PostCutoffGrowth_, initialTime_, CutoffGamma_] :=
   Module[{firmlist = firmlist0, PriceForecasts = PriceForecasts0, 
    PiStepSize = ProfitStepSize0, GammaStepSize = GammaStepSize0, 
    Beta = PresentBias0, Rho = RhoDiscountRate0, 
    g = PostCutoffGrowth, time = initialTime, Cutoff = CutoffGamma},
   DecarbonisationScheduleArray =
    Table[{i, firmlist[[i, 2]], 
      GetSingleFirmNPVListWithBeta[PriceForecasts, firmlist[[i]], 
        GammaStepSize, PiStepSize, t, Rho, Beta , g, Cutoff, 10][[
       1]]}, {i, 1, Length[firms]}];
   DecarbonisationScheduleArray
   ];
   
   (*Implements changes that firms decide is best for them*) 
GetUpdatedFirmList[AllFirmDecarbonisationChoice0_, firms0_, 
  GammaStep0_, ProfitStep0_, GammaCutoff0_, 
  DefaultProfitCoefficient0_] := 
 Module[{DecarbChoice = AllFirmDecarbonisationChoice0, 
   firmlist = firms0, GammaStep = GammaStep0, 
   ProfitStep = ProfitStep0, GammaCutoff = GammaCutoff0, 
   DefaultProfitCoefficient = DefaultProfitCoefficient0},
  NewFirms = firmlist;
  For[i = 1, i <= Length[firmlist], i++,
   (*If the firm has highest NPV today, 
   then begin the decarbonisation process today*) 
   If[DecarbChoice[[i, 3]] == 0, 
    (*Caps the lowest gamma possible as the cutoff point*)
    
    NewFirms[[i, 2]] = Max[firmlist[[i, 2]] - GammaStep, 0.15]; 
    NewFirms[[i, 4]] = 0;
    , 
    (*If necessary increases the amount of accumulated investment*)
  
      NewFirms[[i, 4]] = firmlist[[i, 4]] + 1;
    ];
   NewFirms[[i, 3]] = 
    Profit[c, NewFirms[[i, 2]], 
     DefaultProfitCoefficient + (ProfitStep * NewFirms[[i, 4]])];
   ];
  NewFirms
  ]
  
  (*Ties in all of our functions together and runs a simulation across \
all the time periods*)

GetFullTimeEvolution[firmlist0_, InitialProfitCoefficient0_, 
  NumberYears0_, InitialPermitSupply0_, FinalPermitSupply0_, 
  ProfitStepSize0_, GammaStepSize0_, PresentBiasCoefficient0_,  
  DiscountingFactor0_, PostCutoffGrowthRate0_, CutoffGamma0_] := 
 Module[{firmlist = firmlist0, 
   InitialProfitCoefficient = InitialProfitCoefficient0, 
   NumberYears = NumberYears0, 
   InitialPermitSupply = InitialPermitSupply0 , 
   FinalPermitSupply = FinalPermitSupply0, 
   ProfitStepSize = ProfitStepSize0, GammaStepSize = GammaStepSize0, 
   PresentBiasCoefficient = PresentBiasCoefficient0, 
   DiscountingFactor = DiscountingFactor0, 
   PostCutoffGrowthRate = PostCutoffGrowthRate0, 
   CutoffGamma = CutoffGamma0},
  (*Initialises arrays*)
  
  GammaEvolution = 
   ConstantArray[0, { Length[firmlist], (NumberYears + 1)}];
  AccumulatedInvestmentEvolution = 
   ConstantArray[0, {Length[firmlist], NumberYears + 1}];
  FirmListTensor = ConstantArray[0, NumberYears + 1];
  ProfitEvolution = 
   ConstantArray[0, {Length[firmlist], NumberYears + 1}];
  QuantityEvolution = 
   ConstantArray[0, {Length[firmlist], NumberYears + 1}];
  PermitPriceEvo = ConstantArray[0, NumberYears + 1];
  NewFirms = firmlist;
  For[j = 0, j <= NumberYears, j++,
   (*Follows the process steps as set out in the main body of the \
work*) 
   PermitPriceEvolution = 
    GetPermitPriceEvolution[j, InitialPermitSupply, 
     FinalPermitSupply, NumberYears, NewFirms];
   InvestmentSchedule = 
    GetAllFirmNPV[NewFirms, PermitPriceEvolution , ProfitStepSize, 
     GammaStepSize, PresentBiasCoefficient, DiscountingFactor, 
     PostCutoffGrowthRate, TimeMarker, CutoffGamma];
   UpdatedFirmsList = 
    GetUpdatedFirmList[InvestmentSchedule, NewFirms, GammaStepSize, 
     ProfitStepSize, CutoffGamma, InitialProfitCoefficient];
   NewFirms = UpdatedFirmsList;
   YearlyResults = 
    GetPermitEquilibrium[PermitPriceEvolution[[1, 2]], 
     InitialPermitSupply, 150, 0.1, NewFirms];
   GammaEvolution[[All, j + 1]] = NewFirms[[All, 2]];
   AccumulatedInvestmentEvolution[[All, j + 1]] = NewFirms[[All, 4]];
   FirmListTensor[[j + 1]] = YearlyResults[[1]];
   ProfitEvolution[[All, j + 1]] = 
    FirmListTensor[[j + 1]][[2 ;; Length[NewFirms] + 1, 8]];
   QuantityEvolution[[All, j + 1]] = 
    FirmListTensor[[j + 1]][[2 ;; Length[NewFirms] + 1, 4]];
   PermitPriceEvo[[j + 1]] = YearlyResults[[3]];
   ];
  {GammaEvolution, AccumulatedInvestmentEvolution, ProfitEvolution, 
   QuantityEvolution, PermitPriceEvo, FirmListTensor}
  ]
  
  (*Heterogenous betas*) 
GetFullTimeEvolutionWithBetas[firmlist0_, InitialProfitCoefficient0_, 
  NumberYears0_, InitialPermitSupply0_, FinalPermitSupply0_, 
  ProfitStepSize0_, GammaStepSize0_, PresentBiasCoefficient0_,  
  DiscountingFactor0_, PostCutoffGrowthRate0_, CutoffGamma0_] := 
 Module[{firmlist = firmlist0, 
   InitialProfitCoefficient = InitialProfitCoefficient0, 
   NumberYears = NumberYears0, 
   InitialPermitSupply = InitialPermitSupply0 , 
   FinalPermitSupply = FinalPermitSupply0, 
   ProfitStepSize = ProfitStepSize0, GammaStepSize = GammaStepSize0, 
   PresentBiasCoefficient = PresentBiasCoefficient0, 
   DiscountingFactor = DiscountingFactor0, 
   PostCutoffGrowthRate = PostCutoffGrowthRate0, 
   CutoffGamma = CutoffGamma0},
  GammaEvolution = 
   ConstantArray[0, { Length[firmlist], (NumberYears + 1)}];
  AccumulatedInvestmentEvolution = 
   ConstantArray[0, {Length[firmlist], NumberYears + 1}];
  FirmListTensor = ConstantArray[0, NumberYears + 1];
  ProfitEvolution = 
   ConstantArray[0, {Length[firmlist], NumberYears + 1}];
  QuantityEvolution = 
   ConstantArray[0, {Length[firmlist], NumberYears + 1}];
  PermitPriceEvo = ConstantArray[0, NumberYears + 1];
  NewFirms = firmlist;
  For[j = 0, j <= NumberYears, j++,
   PermitPriceEvolution = 
    GetPermitPriceEvolution[j, InitialPermitSupply, 
     FinalPermitSupply, NumberYears, NewFirms];
   InvestmentSchedule = 
    GetAllFirmNPVWithBetas[NewFirms, PermitPriceEvolution , 
     ProfitStepSize, GammaStepSize, PresentBiasCoefficient, 
     DiscountingFactor, PostCutoffGrowthRate, TimeMarker, CutoffGamma];
   UpdatedFirmsList = 
    GetUpdatedFirmList[InvestmentSchedule, NewFirms, GammaStepSize, 
     ProfitStepSize, CutoffGamma, InitialProfitCoefficient];
   NewFirms = UpdatedFirmsList;
   YearlyResults = 
    GetPermitEquilibriumWithBetas[PermitPriceEvolution[[1, 2]], 
     InitialPermitSupply, 150, 0.1, NewFirms];
   GammaEvolution[[All, j + 1]] = NewFirms[[All, 2]];
   AccumulatedInvestmentEvolution[[All, j + 1]] = NewFirms[[All, 4]];
   FirmListTensor[[j + 1]] = YearlyResults[[1]];
   ProfitEvolution[[All, j + 1]] = 
    FirmListTensor[[j + 1]][[2 ;; Length[NewFirms] + 1, 8]];
   QuantityEvolution[[All, j + 1]] = 
    FirmListTensor[[j + 1]][[2 ;; Length[NewFirms] + 1, 4]];
   PermitPriceEvo[[j + 1]] = YearlyResults[[3]];
   ];
  {GammaEvolution, AccumulatedInvestmentEvolution, ProfitEvolution, 
   QuantityEvolution, PermitPriceEvo, FirmListTensor}
  ]
  
  Profit[c_, \[Gamma]_, Co_] := 
 Co \[Gamma] (c^(1/(1 + E^- (\[Gamma] - 0.5))))
 
 (*Generating output*)
 
 firms = FirmList[25, 0.5, 0.15, 100];
 
 TimeEvoHomogenousBeta1 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 1,  0.125, 
   0.03, 0.15];
TimeEvoHomogenousBeta05 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.5,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta025 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.25,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta02 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.2,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta015 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.15,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta01 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.1,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta0075 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.075,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta005 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.05,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta0025 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.025,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta001 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.01,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta0001 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0.001,  
   0.125, 0.03, 0.15];
TimeEvoHomogenousBeta0 = 
  GetFullTimeEvolution[firms, 100, 10, 1000, 250, 10, 0.1, 0,  0.125, 
   0.03, 0.15];
   
   betasample1 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample2 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample3 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample4 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample5 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample6 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample7 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample8 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample9 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample10 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample11 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample12 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample13 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample14 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample15 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample16 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample17 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample18 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample19 = FirmListWithBetas[25, 0.5, 0.15, 100];
betasample20 = FirmListWithBetas[25, 0.5, 0.15, 100];

databetasample1 = 
  GetFullTimeEvolutionWithBetas[betasample1, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample2 = 
  GetFullTimeEvolutionWithBetas[betasample2, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample3 = 
  GetFullTimeEvolutionWithBetas[betasample3, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample4 = 
 GetFullTimeEvolutionWithBetas[betasample4, 100, 10, 1000, 250, 10, 
  0.1, 1,  0.125, 0.03, 0.15]; databetasample5 = 
 GetFullTimeEvolutionWithBetas[betasample5, 100, 10, 1000, 250, 10, 
  0.1, 1,  0.125, 0.03, 0.15];
databetasample6 = 
  GetFullTimeEvolutionWithBetas[betasample6, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample7 = 
  GetFullTimeEvolutionWithBetas[betasample7, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample8 = 
  GetFullTimeEvolutionWithBetas[betasample8, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample9 = 
  GetFullTimeEvolutionWithBetas[betasample9, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample10 = 
  GetFullTimeEvolutionWithBetas[betasample10, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample11 = 
  GetFullTimeEvolutionWithBetas[betasample11, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample12 = 
  GetFullTimeEvolutionWithBetas[betasample12, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample13 = 
  GetFullTimeEvolutionWithBetas[betasample13, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample14 = 
  GetFullTimeEvolutionWithBetas[betasample14, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample15 = 
  GetFullTimeEvolutionWithBetas[betasample15, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample16 = 
  GetFullTimeEvolutionWithBetas[betasample16, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample17 = 
  GetFullTimeEvolutionWithBetas[betasample17, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample18 = 
  GetFullTimeEvolutionWithBetas[betasample18, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample19 = 
  GetFullTimeEvolutionWithBetas[betasample19, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
databetasample20 = 
  GetFullTimeEvolutionWithBetas[betasample20, 100, 10, 1000, 250, 10, 
   0.1, 1,  0.125, 0.03, 0.15];
   
   ListTester = ConstantArray[0, {500, 3}];
For[j = 0, j <= 19, j++,
  DataCase1 = 
   ToExpression["databetasample" <> ToString[j + 1]][[6]][[11]];
  DataCase2 = 
   ToExpression["databetasample" <> ToString[j + 1]][[6]][[1]];
  For[i = 2, i <= 26, i++,
   ListTester[[(25 j) + i - 1, 1]] = DataCase2[[i, 2]];
   ListTester[[(25 j) + i - 1, 2]] = DataCase1[[i, 10]];
   ListTester[[(25 j) + i - 1, 3]] = 
    If[DataCase1[[i, 2]] == 0.15, 0, 1];
   ];
  ];
  
  InterData = SortBy[ListTester, Last];
DidntDecarbonise = ConstantArray[0, {48, 2}];
DidDecarbonise = ConstantArray[0, {452, 2}];
For[i = 1, i <= 452, i++,
  DidDecarbonise[[i, 1]] = InterData[[i, 1]];
  DidDecarbonise[[i, 2]] = InterData[[i, 2]];
  ];
For[i = 1, i <= 48, i++,
  DidntDecarbonise[[i, 1]] = InterData[[i + 452, 1]];
  DidntDecarbonise[[i, 2]] = InterData[[i + 452, 2]];
  ];

ListPlot[{DidDecarbonise, DidntDecarbonise}, 
 PlotStyle -> {Green, Red}, Frame -> True, 
 FrameLabel -> {"Initial Gamma", "Beta"}, 
 PlotLegends -> {"Made cutoff", "Did not make cutoff"}]

betasample1[[All, 2]] // MatrixForm
databetasample1[[1]] // MatrixForm
GammaEvolutionData = ConstantArray[0, {25, 12}];
GammaEvolutionData[[All, 1]] = betasample1[[All, 2]];
GammaEvolutionData[[All, 2 ;; 12]] = databetasample1[[1]];
GammaEvolutionData

ListPlot[GammaEvolutionData, Joined -> True, Frame -> True, 
 FrameLabel -> {"Time", "Gamma"}, PlotLabel -> "Gamma Evolutions"]
 
 NumberOfFirmsWhoMissCutoff[input_, beta0_] := 
 Module[{inp = input, beta = beta0},
  firmlist = inp[[6]][[11]][[2 ;; 26, 2]];
  InputArray = ConstantArray[0, 25];
  For[i = 1, i <= 25, i++, 
   InputArray[[i]] = If[firmlist[[i]] == 0.15, 0, 1]];
  {beta, Total[InputArray]}
  ]
  
  Number1 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta1, 1];
Number2 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta05, 0.5];
Number3 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta025, 0.25];
Number4 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta02, 0.2];
Number5 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta015, 0.15];
Number6 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta01, 0.1];  
Number7 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta0075, 0.075];
Number8 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta005, 0.05];
Number9 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta0025, 0.025];
Number10 = 
  NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta001, 0.01];
Number11 = 
  NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta0001, 0.001];
Number12 = NumberOfFirmsWhoMissCutoff[TimeEvoHomogenousBeta0, 0];

{{"\!\(\*
StyleBox[\"Beta\",\nFontWeight->\"Bold\"]\)", "\!\(\*
StyleBox[\"Number\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"of\",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\" \",\nFontWeight->\"Bold\"]\)\!\(\*
StyleBox[\"firms\",\nFontWeight->\"Bold\"]\)"}, Number1, Number2, 
  Number3, Number4, Number5, Number6, Number7, Number8, Number9, 
  Number10, Number11, Number12} // MatrixForm
  
  ListPlot[{Number1, Number2, Number3, Number4, Number5, Number6, 
  Number7, Number8, Number9, Number10, Number11, Number12}, 
 PlotRange -> Full, Joined -> True, Frame -> True, 
 FrameLabel -> {"Beta", "Number of firms"} ]
